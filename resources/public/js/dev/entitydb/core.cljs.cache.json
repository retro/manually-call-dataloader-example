["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$entitydb.core","~:imports",null,"~:requires",["^ ","~$util","~$entitydb.util","^<","^<","~$relations","~$entitydb.relations","^>","^>","~$set","~$clojure.set","^@","^@"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$update-values","^<"],"~:defs",["^ ","~$get-named-item-meta",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","~:line",346,"~:column",7,"~:end-line",346,"~:end-column",26,"~:arglists",["~#list",["~$quote",["^N",[["~$schema","~$db","~$entity-kw","~$collection-key"]]]]],"~:doc","Returns the meta data for an entity referenced in the named item slot."],"^7","~$entitydb.core/get-named-item-meta","~:variadic",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",26,"~:method-params",["^N",[["^P","^Q","^R","^S"]]],"~:protocol-impl",null,"~:arglists-meta",["^N",[null,null]],"^J",1,"^I",346,"^K",346,"~:max-fixed-arity",4,"~:fn-var",true,"^M",["^N",["^O",["^N",[["^P","^Q","^R","^S"]]]]],"^T","Returns the meta data for an entity referenced in the named item slot."],"~$insert-item-when-not-nil",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",47,"^J",7,"^K",47,"^L",31,"^M",["^N",["^O",["^N",[["^P","^Q","^R","~$item"]]]]],"^T","Inserts an entity into the EntityDB if the entity is not nil."],"^7","~$entitydb.core/insert-item-when-not-nil","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",31,"^W",["^N",[["^P","^Q","^R","^11"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",47,"^K",47,"^Z",4,"^[",true,"^M",["^N",["^O",["^N",[["^P","^Q","^R","^11"]]]]],"^T","Inserts an entity into the EntityDB if the entity is not nil."],"~$insert-collection",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",86,"^J",7,"^K",86,"^L",24,"^M",["^N",["^O",["^N",[["^P","^Q","^R","^S","~$data"],["^P","^Q","^R","^S","^14","~$meta"]]]]],"^T","Inserts a collection of items into the EntityDB. Each item will be\n  stored in the internal store map, and the collection will be stored as a vector\n  of entity identities.\n\n  ```clojure\n  (def entity-db-v1 {})\n  (def schema {:foos {:id :id}})\n\n  (def collection [{:id 1 :name \"foo\"} {:id 2 :name \"bar\"}])\n\n  (def entity-db-v2 (insert-collection schema entity-db-v1 :foos :list collection))\n  ;; Returns the new version of entity db. Each item will be stored\n  ;; in the internal store map and collection will contain only the\n  ;; item ids.\n\n  (get-collection schema entity-db-v2 :foos :list)\n  ;; Returns a collection of items named `:list`. Although internally collections\n  ;; stores only a vector of ids, this function will return a vector of entities.\n  ;;\n  ;; [{:id 1 :name \"foo\"} {:id 2 :name \"bar\"}]\n  \n  ```\n  ","~:top-fn",["^ ","^V",false,"^Z",6,"^W",["^N",[["^P","^Q","^R","^S","^14"],["^P","^Q","^R","^S","^14","^15"]]],"^M",["^N",[["^P","^Q","^R","^S","^14"],["^P","^Q","^R","^S","^14","^15"]]],"^Y",["^N",[null,null]]]],"^7","~$entitydb.core/insert-collection","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",24,"^16",["^ ","^V",false,"^Z",6,"^W",["^N",[["^P","^Q","^R","^S","^14"],["^P","^Q","^R","^S","^14","^15"]]],"^M",["^N",[["^P","^Q","^R","^S","^14"],["^P","^Q","^R","^S","^14","^15"]]],"^Y",["^N",[null,null]]],"^W",["^N",[["^P","^Q","^R","^S","^14"],["^P","^Q","^R","^S","^14","^15"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",86,"^K",86,"^Z",6,"^[",true,"^M",["^N",[["^P","^Q","^R","^S","^14"],["^P","^Q","^R","^S","^14","^15"]]],"^T","Inserts a collection of items into the EntityDB. Each item will be\n  stored in the internal store map, and the collection will be stored as a vector\n  of entity identities.\n\n  ```clojure\n  (def entity-db-v1 {})\n  (def schema {:foos {:id :id}})\n\n  (def collection [{:id 1 :name \"foo\"} {:id 2 :name \"bar\"}])\n\n  (def entity-db-v2 (insert-collection schema entity-db-v1 :foos :list collection))\n  ;; Returns the new version of entity db. Each item will be stored\n  ;; in the internal store map and collection will contain only the\n  ;; item ids.\n\n  (get-collection schema entity-db-v2 :foos :list)\n  ;; Returns a collection of items named `:list`. Although internally collections\n  ;; stores only a vector of ids, this function will return a vector of entities.\n  ;;\n  ;; [{:id 1 :name \"foo\"} {:id 2 :name \"bar\"}]\n  \n  ```\n  "],"~$vacuum",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",435,"^J",7,"^K",435,"^L",13,"^M",["^N",["^O",["^N",[["^Q"]]]]],"^T","Removes orphaned entities from the EntityDB. Any entity that is not referenced\n  in a collection or in a named item slot will be removed from the EntityDB"],"^7","~$entitydb.core/vacuum","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",13,"^W",["^N",[["^Q"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",435,"^K",435,"^Z",1,"^[",true,"^M",["^N",["^O",["^N",[["^Q"]]]]],"^T","Removes orphaned entities from the EntityDB. Any entity that is not referenced\n  in a collection or in a named item slot will be removed from the EntityDB"],"~$get-item-meta",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",339,"^J",7,"^K",339,"^L",20,"^M",["^N",["^O",["^N",[["^P","^Q","^R","~$id"]]]]],"^T","Gets meta data for an entity."],"^7","~$entitydb.core/get-item-meta","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",20,"^W",["^N",[["^P","^Q","^R","^1;"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",339,"^K",339,"^Z",4,"^[",true,"^M",["^N",["^O",["^N",[["^P","^Q","^R","^1;"]]]]],"^T","Gets meta data for an entity."],"~$get-collection-meta",["^ ","^7","~$entitydb.core/get-collection-meta","^H","resources/public/js/dev/entitydb/core.cljs","^I",355,"^J",1,"^K",355,"^L",25,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",355,"^J",6,"^K",355,"^L",25],"^T","Returns the meta data for a collection."],"~$remove-named-item",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",274,"^J",7,"^K",274,"^L",24,"^M",["^N",["^O",["^N",[["^Q","^R","^S"]]]]],"^T","Removes the named-item slot. Entity will still be stored in the internal store, but\n  won't be available through the named-item slot.\n\n  ```clojure\n  (def entity-db-v1 {})\n  (def schema {:foos {:id :id}})\n\n  (def foo-entity {:id 1 :name \"bar\"})\n\n  (def entity-db-v2 (insert-named-item schema entity-db-v1 :foos :current foo-entity))\n  \n  (get-named-item schema entity-db-v1 :foos :current)\n  ;; Returns `{:id 1 :name \"bar\"}`\n\n  (def entity-db-v3 (remove-named-item schema entity-db-v2 :foos :current))\n\n  (get-named-item schema entity-db-v2 :foos :current)\n  ;; Returns `nil`\n\n  (get-item-by-id schema entity-db-v2 :foos 1)\n  ;; Returns `{:id 1 :name \"bar\"}`\n  ```\n  "],"^7","~$entitydb.core/remove-named-item","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",24,"^W",["^N",[["^Q","^R","^S"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",274,"^K",274,"^Z",3,"^[",true,"^M",["^N",["^O",["^N",[["^Q","^R","^S"]]]]],"^T","Removes the named-item slot. Entity will still be stored in the internal store, but\n  won't be available through the named-item slot.\n\n  ```clojure\n  (def entity-db-v1 {})\n  (def schema {:foos {:id :id}})\n\n  (def foo-entity {:id 1 :name \"bar\"})\n\n  (def entity-db-v2 (insert-named-item schema entity-db-v1 :foos :current foo-entity))\n  \n  (get-named-item schema entity-db-v1 :foos :current)\n  ;; Returns `{:id 1 :name \"bar\"}`\n\n  (def entity-db-v3 (remove-named-item schema entity-db-v2 :foos :current))\n\n  (get-named-item schema entity-db-v2 :foos :current)\n  ;; Returns `nil`\n\n  (get-item-by-id schema entity-db-v2 :foos 1)\n  ;; Returns `{:id 1 :name \"bar\"}`\n  ```\n  "],"~$get-collection",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",377,"^J",7,"^K",377,"^L",21,"^M",["^N",["^O",["^N",[["^P","^Q","^R","^S"]]]]],"^T","Gets collection by it's key. Internally collections store only entity ids, but\n  this function will return a collection of entities based on the ids stored in the collection\n\n  \n  ```clojure\n  (def entity-db-v1 {})\n  (def schema {:foos {:id :id}})\n\n  (def collection [{:id 1 :name \"foo\"} {:id 2 :name \"bar\"}])\n\n  (def entity-db-v2 (insert-collection schema entity-db-v1 :foos :list collection))\n  ;; Returns the new version of entity db. Each item will be stored\n  ;; in the internal store map and collection will contain only the\n  ;; item ids.\n\n  (get-collection schema entity-db-v2 :foos :list)\n  ;; Returns a collection of items named `:list`. Although internally collections\n  ;; stores only a vector of ids, this function will return a vector of entities.\n  ;;\n  ;; [{:id 1 :name \"foo\"} {:id 2 :name \"bar\"}]\n  ```\n  "],"^7","~$entitydb.core/get-collection","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",21,"^W",["^N",[["^P","^Q","^R","^S"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",377,"^K",377,"^Z",4,"^[",true,"^M",["^N",["^O",["^N",[["^P","^Q","^R","^S"]]]]],"^T","Gets collection by it's key. Internally collections store only entity ids, but\n  this function will return a collection of entities based on the ids stored in the collection\n\n  \n  ```clojure\n  (def entity-db-v1 {})\n  (def schema {:foos {:id :id}})\n\n  (def collection [{:id 1 :name \"foo\"} {:id 2 :name \"bar\"}])\n\n  (def entity-db-v2 (insert-collection schema entity-db-v1 :foos :list collection))\n  ;; Returns the new version of entity db. Each item will be stored\n  ;; in the internal store map and collection will contain only the\n  ;; item ids.\n\n  (get-collection schema entity-db-v2 :foos :list)\n  ;; Returns a collection of items named `:list`. Although internally collections\n  ;; stores only a vector of ids, this function will return a vector of entities.\n  ;;\n  ;; [{:id 1 :name \"foo\"} {:id 2 :name \"bar\"}]\n  ```\n  "],"~$remove-item-id-from-collections",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",224,"^J",17,"^K",224,"^L",48,"~:private",true,"^M",["^N",["^O",["^N",[["~$collections","^1;"]]]]]],"^1D",true,"^7","~$entitydb.core/remove-item-id-from-collections","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",48,"^W",["^N",[["^1E","^1;"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",224,"^K",224,"^Z",2,"^[",true,"^M",["^N",["^O",["^N",[["^1E","^1;"]]]]]],"~$insert-named-item",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",54,"^J",7,"^K",54,"^L",24,"^M",["^N",["^O",["^N",[["^P","^Q","^R","^S","^11"],["^P","^Q","^R","^S","^11","^15"]]]]],"^T","Inserts an item into the EntityDB, and references it from the named item slot.\n\n  Item will be stored in the internal store, and named item slot will contain only \n  the identity of the item.\n   \n  ```clojure\n  (def entity-db-v1 {})\n  (def schema {:foos {:id :id}})\n\n  (def entity-db-v2 (insert-named-item schema entity-db-v1 :foos :current {:id 1 :name \"foo\"}))\n  ;; Returns the new version of the entity-db with the entity saved in the store and\n  ;; referenced from the `:current` named item slot.\n\n  (get-named-item schema entity-db-v2 :foos :current)\n  ;; Returns the entity referenced from the `:current` named slot.\n\n  ```\n  ","^16",["^ ","^V",false,"^Z",6,"^W",["^N",[["^P","^Q","^R","^S","^11"],["^P","^Q","^R","^S","^11","^15"]]],"^M",["^N",[["^P","^Q","^R","^S","^11"],["^P","^Q","^R","^S","^11","^15"]]],"^Y",["^N",[null,null]]]],"^7","~$entitydb.core/insert-named-item","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",24,"^16",["^ ","^V",false,"^Z",6,"^W",["^N",[["^P","^Q","^R","^S","^11"],["^P","^Q","^R","^S","^11","^15"]]],"^M",["^N",[["^P","^Q","^R","^S","^11"],["^P","^Q","^R","^S","^11","^15"]]],"^Y",["^N",[null,null]]],"^W",["^N",[["^P","^Q","^R","^S","^11"],["^P","^Q","^R","^S","^11","^15"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",54,"^K",54,"^Z",6,"^[",true,"^M",["^N",[["^P","^Q","^R","^S","^11"],["^P","^Q","^R","^S","^11","^15"]]],"^T","Inserts an item into the EntityDB, and references it from the named item slot.\n\n  Item will be stored in the internal store, and named item slot will contain only \n  the identity of the item.\n   \n  ```clojure\n  (def entity-db-v1 {})\n  (def schema {:foos {:id :id}})\n\n  (def entity-db-v2 (insert-named-item schema entity-db-v1 :foos :current {:id 1 :name \"foo\"}))\n  ;; Returns the new version of the entity-db with the entity saved in the store and\n  ;; referenced from the `:current` named item slot.\n\n  (get-named-item schema entity-db-v2 :foos :current)\n  ;; Returns the entity referenced from the `:current` named slot.\n\n  ```\n  "],"~$insert-meta",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",212,"^J",7,"^K",212,"^L",18,"^M",["^N",["^O",["^N",[["^Q","^R","~$meta-key","^15"]]]]],"^T","Inserts meta data for an entity or collection into the store."],"^7","~$entitydb.core/insert-meta","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",18,"^W",["^N",[["^Q","^R","^1J","^15"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",212,"^K",212,"^Z",4,"^[",true,"^M",["^N",["^O",["^N",[["^Q","^R","^1J","^15"]]]]],"^T","Inserts meta data for an entity or collection into the store."],"~$remove-item-id-from-named-items",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",220,"^J",17,"^K",220,"^L",48,"^1D",true,"^M",["^N",["^O",["^N",[["^1E","^1;"]]]]]],"^1D",true,"^7","~$entitydb.core/remove-item-id-from-named-items","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",48,"^W",["^N",[["^1E","^1;"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",220,"^K",220,"^Z",2,"^[",true,"^M",["^N",["^O",["^N",[["^1E","^1;"]]]]]],"~$remove-item",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",228,"^J",7,"^K",228,"^L",18,"^M",["^N",["^O",["^N",[["^P","^Q","^R","^1;"]]]]],"^T","Removes item from the store. It will also remove it from any named-item slots or collections.\n\n  ```clojure\n  (def entity-db-v1 {})\n  (def schema {:foos {:id :id}})\n\n  (def foo-entity {:id 1 :name \"Bar\"})\n  \n  ;; insert `foo-entity` in the `:current` named item slot\n  (def entity-db-v2 (insert-named-item schema entity-db-v1 :foos :current foo-entity))\n\n  ;; insert `foo-entity` as a part of the `:list` collection\n  (def entity-db-v3 (insert-collection schema entity-db-v2 :foos :list [foo-entity]))\n\n  ;; get `foo-entity` from the entity-db\n  (get-item-by-id schema entity-db-v3 :foos 1)\n  ;; returns `foo-entity`\n\n  (def entity-db-v4 (remove-item schema entity-db :foos 1))\n\n  (get-named-item schema entity-db-v4 :foos :current)\n  ;; returns `nil`\n\n  (get-collection schema entity-db-v4 :foos :list)\n  ;; returns []\n  ```\n  "],"^7","~$entitydb.core/remove-item","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",18,"^W",["^N",[["^P","^Q","^R","^1;"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",228,"^K",228,"^Z",4,"^[",true,"^M",["^N",["^O",["^N",[["^P","^Q","^R","^1;"]]]]],"^T","Removes item from the store. It will also remove it from any named-item slots or collections.\n\n  ```clojure\n  (def entity-db-v1 {})\n  (def schema {:foos {:id :id}})\n\n  (def foo-entity {:id 1 :name \"Bar\"})\n  \n  ;; insert `foo-entity` in the `:current` named item slot\n  (def entity-db-v2 (insert-named-item schema entity-db-v1 :foos :current foo-entity))\n\n  ;; insert `foo-entity` as a part of the `:list` collection\n  (def entity-db-v3 (insert-collection schema entity-db-v2 :foos :list [foo-entity]))\n\n  ;; get `foo-entity` from the entity-db\n  (get-item-by-id schema entity-db-v3 :foos 1)\n  ;; returns `foo-entity`\n\n  (def entity-db-v4 (remove-item schema entity-db :foos 1))\n\n  (get-named-item schema entity-db-v4 :foos :current)\n  ;; returns `nil`\n\n  (get-collection schema entity-db-v4 :foos :list)\n  ;; returns []\n  ```\n  "],"~$prepend-collection",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",161,"^J",7,"^K",161,"^L",25,"^M",["^N",["^O",["^N",[["^P","^Q","^R","^S","^14"],["^P","^Q","^R","^S","^14","^15"]]]]],"^T","Prepends items to an existing collection.\n\n  ```clojure\n  (def entity-db-v1 {})\n  (def schema {:foos {:id :id}})\n\n  (def collection [{:id 1 :name \"foo\"} {:id 2 :name \"bar\"}])\n\n  (def entity-db-v2 (insert-collection schema entity-db-v1 :foos :list collection))\n  ;; Returns the new version of entity db. Each item will be stored\n  ;; in the internal store map and collection will contain only the\n  ;; item ids.\n\n  (get-collection schema entity-db-v2 :foos :list)\n  ;; Returns a collection of items named `:list`. Although internally collections\n  ;; stores only a vector of ids, this function will return a vector of entities.\n  ;;\n  ;; [{:id 1 :name \"foo\"} {:id 2 :name \"bar\"}]\n\n  \n  (def entity-db-v3 (prepend-collection schema entity-db-v2 :foos :list [{:id 3 :name \"baz\"}]))\n  \n  (get-collection schema entity-db-v3 :foos :list)\n  ;; Returns [{:id 3 :name \"baz\"} {:id 1 :name \"foo\"} {:id 2 :name \"bar\"}]\n  \n  ```\n  ","^16",["^ ","^V",false,"^Z",6,"^W",["^N",[["^P","^Q","^R","^S","^14"],["^P","^Q","^R","^S","^14","^15"]]],"^M",["^N",[["^P","^Q","^R","^S","^14"],["^P","^Q","^R","^S","^14","^15"]]],"^Y",["^N",[null,null]]]],"^7","~$entitydb.core/prepend-collection","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",25,"^16",["^ ","^V",false,"^Z",6,"^W",["^N",[["^P","^Q","^R","^S","^14"],["^P","^Q","^R","^S","^14","^15"]]],"^M",["^N",[["^P","^Q","^R","^S","^14"],["^P","^Q","^R","^S","^14","^15"]]],"^Y",["^N",[null,null]]],"^W",["^N",[["^P","^Q","^R","^S","^14"],["^P","^Q","^R","^S","^14","^15"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",161,"^K",161,"^Z",6,"^[",true,"^M",["^N",[["^P","^Q","^R","^S","^14"],["^P","^Q","^R","^S","^14","^15"]]],"^T","Prepends items to an existing collection.\n\n  ```clojure\n  (def entity-db-v1 {})\n  (def schema {:foos {:id :id}})\n\n  (def collection [{:id 1 :name \"foo\"} {:id 2 :name \"bar\"}])\n\n  (def entity-db-v2 (insert-collection schema entity-db-v1 :foos :list collection))\n  ;; Returns the new version of entity db. Each item will be stored\n  ;; in the internal store map and collection will contain only the\n  ;; item ids.\n\n  (get-collection schema entity-db-v2 :foos :list)\n  ;; Returns a collection of items named `:list`. Although internally collections\n  ;; stores only a vector of ids, this function will return a vector of entities.\n  ;;\n  ;; [{:id 1 :name \"foo\"} {:id 2 :name \"bar\"}]\n\n  \n  (def entity-db-v3 (prepend-collection schema entity-db-v2 :foos :list [{:id 3 :name \"baz\"}]))\n  \n  (get-collection schema entity-db-v3 :foos :list)\n  ;; Returns [{:id 3 :name \"baz\"} {:id 1 :name \"foo\"} {:id 2 :name \"bar\"}]\n  \n  ```\n  "],"~$insert-related",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",199,"^J",17,"^K",199,"^L",31,"^1D",true,"^M",["^N",["^O",["^N",[["^P","^Q","^=","^R","^1;","^11"]]]]]],"^1D",true,"^7","~$entitydb.core/insert-related","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",31,"^W",["^N",[["^P","^Q","^=","^R","^1;","^11"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",199,"^K",199,"^Z",6,"^[",true,"^M",["^N",["^O",["^N",[["^P","^Q","^=","^R","^1;","^11"]]]]]],"~$remove-collection-or-named-item",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",268,"^J",17,"^K",268,"^L",48,"^1D",true,"^M",["^N",["^O",["^N",[["^Q","^R","~$collection-type","^S"]]]]]],"^1D",true,"^7","~$entitydb.core/remove-collection-or-named-item","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",48,"^W",["^N",[["^Q","^R","^1U","^S"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",268,"^K",268,"^Z",4,"^[",true,"^M",["^N",["^O",["^N",[["^Q","^R","^1U","^S"]]]]]],"~$meta-store",["^ ","^7","~$entitydb.core/meta-store","^H","resources/public/js/dev/entitydb/core.cljs","^I",17,"^J",1,"^K",17,"^L",26,"^1D",true,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",17,"^J",16,"^K",17,"^L",26,"^1D",true],"~:tag","~$cljs.core/Keyword"],"~$make-dbal",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",443,"^J",7,"^K",443,"^L",16,"^M",["^N",["^O",["^N",[["^P"]]]]],"^T","Returns a map with all public functions. These functions will have `schema`\n  partially applied to them so you don't have to pass the schema around."],"^7","~$entitydb.core/make-dbal","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",16,"^W",["^N",[["^P"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",443,"^K",443,"^Z",1,"^[",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^T","Returns a map with all public functions. These functions will have `schema`\n  partially applied to them so you don't have to pass the schema around."],"~$append-collection",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",123,"^J",7,"^K",123,"^L",24,"^M",["^N",["^O",["^N",[["^P","^Q","^R","^S","^14"],["^P","^Q","^R","^S","^14","^15"]]]]],"^T","Appends items to an existing collection.\n\n  ```clojure\n  (def entity-db-v1 {})\n  (def schema {:foos {:id :id}})\n\n  (def collection [{:id 1 :name \"foo\"} {:id 2 :name \"bar\"}])\n\n  (def entity-db-v2 (insert-collection schema entity-db-v1 :foos :list collection))\n  ;; Returns the new version of entity db. Each item will be stored\n  ;; in the internal store map and collection will contain only the\n  ;; item ids.\n\n  (get-collection schema entity-db-v2 :foos :list)\n  ;; Returns a collection of items named `:list`. Although internally collections\n  ;; stores only a vector of ids, this function will return a vector of entities.\n  ;;\n  ;; [{:id 1 :name \"foo\"} {:id 2 :name \"bar\"}]\n\n  \n  (def entity-db-v3 (append-collection schema entity-db-v2 :foos :list [{:id 3 :name \"baz}]))\n  \n  (get-collection schema entity-db-v3 :foos :list)\n  ;; Returns [{:id 1 :name \"foo\"} {:id 2 :name \"bar} {:id 3 :name \"baz\"}]\n  \n  ```\n  ","^16",["^ ","^V",false,"^Z",6,"^W",["^N",[["^P","^Q","^R","^S","^14"],["^P","^Q","^R","^S","^14","^15"]]],"^M",["^N",[["^P","^Q","^R","^S","^14"],["^P","^Q","^R","^S","^14","^15"]]],"^Y",["^N",[null,null]]]],"^7","~$entitydb.core/append-collection","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",24,"^16",["^ ","^V",false,"^Z",6,"^W",["^N",[["^P","^Q","^R","^S","^14"],["^P","^Q","^R","^S","^14","^15"]]],"^M",["^N",[["^P","^Q","^R","^S","^14"],["^P","^Q","^R","^S","^14","^15"]]],"^Y",["^N",[null,null]]],"^W",["^N",[["^P","^Q","^R","^S","^14"],["^P","^Q","^R","^S","^14","^15"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",123,"^K",123,"^Z",6,"^[",true,"^M",["^N",[["^P","^Q","^R","^S","^14"],["^P","^Q","^R","^S","^14","^15"]]],"^T","Appends items to an existing collection.\n\n  ```clojure\n  (def entity-db-v1 {})\n  (def schema {:foos {:id :id}})\n\n  (def collection [{:id 1 :name \"foo\"} {:id 2 :name \"bar\"}])\n\n  (def entity-db-v2 (insert-collection schema entity-db-v1 :foos :list collection))\n  ;; Returns the new version of entity db. Each item will be stored\n  ;; in the internal store map and collection will contain only the\n  ;; item ids.\n\n  (get-collection schema entity-db-v2 :foos :list)\n  ;; Returns a collection of items named `:list`. Although internally collections\n  ;; stores only a vector of ids, this function will return a vector of entities.\n  ;;\n  ;; [{:id 1 :name \"foo\"} {:id 2 :name \"bar\"}]\n\n  \n  (def entity-db-v3 (append-collection schema entity-db-v2 :foos :list [{:id 3 :name \"baz}]))\n  \n  (get-collection schema entity-db-v3 :foos :list)\n  ;; Returns [{:id 1 :name \"foo\"} {:id 2 :name \"bar} {:id 3 :name \"baz\"}]\n  \n  ```\n  "],"~$remove-meta",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",328,"^J",7,"^K",328,"^L",18,"^M",["^N",["^O",["^N",[["^Q","^R","^1;"]]]]],"^T","Removes any meta data stored on the entity or collection"],"^7","~$entitydb.core/remove-meta","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",18,"^W",["^N",[["^Q","^R","^1;"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",328,"^K",328,"^Z",3,"^[",true,"^M",["^N",["^O",["^N",[["^Q","^R","^1;"]]]]],"^T","Removes any meta data stored on the entity or collection"],"~$get-named-item",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",406,"^J",7,"^K",406,"^L",21,"^M",["^N",["^O",["^N",[["^P","^Q","^R","^S"],["^P","^Q","^R","^S","~$include-meta"]]]]],"^T","Gets an entity referenced from the named item slot. Internally named slots store\n  only entity ids but this function will return an entity based on the id.","^16",["^ ","^V",false,"^Z",5,"^W",["^N",[["^P","^Q","^R","^S"],["^P","^Q","^R","^S","^26"]]],"^M",["^N",[["^P","^Q","^R","^S"],["^P","^Q","^R","^S","^26"]]],"^Y",["^N",[null,null]]]],"^7","~$entitydb.core/get-named-item","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",21,"^16",["^ ","^V",false,"^Z",5,"^W",["^N",[["^P","^Q","^R","^S"],["^P","^Q","^R","^S","^26"]]],"^M",["^N",[["^P","^Q","^R","^S"],["^P","^Q","^R","^S","^26"]]],"^Y",["^N",[null,null]]],"^W",["^N",[["^P","^Q","^R","^S"],["^P","^Q","^R","^S","^26"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",406,"^K",406,"^Z",5,"^[",true,"^M",["^N",[["^P","^Q","^R","^S"],["^P","^Q","^R","^S","^26"]]],"^T","Gets an entity referenced from the named item slot. Internally named slots store\n  only entity ids but this function will return an entity based on the id."],"~$get-item-by-id",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",368,"^J",7,"^K",368,"^L",21,"^M",["^N",["^O",["^N",[["^P","^Q","^R","^1;"]]]]],"^T","Gets an entity from the store by the id"],"^7","~$entitydb.core/get-item-by-id","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",21,"^W",["^N",[["^P","^Q","^R","^1;"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",368,"^K",368,"^Z",4,"^[",true,"^M",["^N",["^O",["^N",[["^P","^Q","^R","^1;"]]]]],"^T","Gets an entity from the store by the id"],"~$insert-item",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",19,"^J",7,"^K",19,"^L",18,"^M",["^N",["^O",["^N",[["^P","^Q","^R","^11"],["^P","^Q","^R","^11","^15"]]]]],"^T","Inserts an item into the EntityDB collection.\n\n  ```clojure\n  (def schema {:foos {:id :id}})\n  (def entity-db-v1 {})\n\n  (def item {:id 1 :name \"Foo\"})\n  (def item-meta {:is-loading false})\n\n  (def entity-db-v2 (insert-item schema entity-db-v1 :foos item item-meta))\n  ;; Returns the new version of the entity-db with the item inserted\n  ;; inserted into the store\n  ```\n  ","^16",["^ ","^V",false,"^Z",5,"^W",["^N",[["^P","^Q","^R","^11"],["^P","^Q","^R","^11","^15"]]],"^M",["^N",[["^P","^Q","^R","^11"],["^P","^Q","^R","^11","^15"]]],"^Y",["^N",[null,null]]]],"^7","~$entitydb.core/insert-item","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",18,"^16",["^ ","^V",false,"^Z",5,"^W",["^N",[["^P","^Q","^R","^11"],["^P","^Q","^R","^11","^15"]]],"^M",["^N",[["^P","^Q","^R","^11"],["^P","^Q","^R","^11","^15"]]],"^Y",["^N",[null,null]]],"^W",["^N",[["^P","^Q","^R","^11"],["^P","^Q","^R","^11","^15"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",19,"^K",19,"^Z",5,"^[",true,"^M",["^N",[["^P","^Q","^R","^11"],["^P","^Q","^R","^11","^15"]]],"^T","Inserts an item into the EntityDB collection.\n\n  ```clojure\n  (def schema {:foos {:id :id}})\n  (def entity-db-v1 {})\n\n  (def item {:id 1 :name \"Foo\"})\n  (def item-meta {:is-loading false})\n\n  (def entity-db-v2 (insert-item schema entity-db-v1 :foos item item-meta))\n  ;; Returns the new version of the entity-db with the item inserted\n  ;; inserted into the store\n  ```\n  "],"~$vacuum-entity-db",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",420,"^J",17,"^K",420,"^L",33,"^1D",true,"^M",["^N",["^O",["^N",[["^Q","^R"]]]]]],"^1D",true,"^7","~$entitydb.core/vacuum-entity-db","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",33,"^W",["^N",[["^Q","^R"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",420,"^K",420,"^Z",2,"^[",true,"^M",["^N",["^O",["^N",[["^Q","^R"]]]]]],"~$get-related-items-fn",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",359,"^J",17,"^K",359,"^L",37,"^1D",true,"^M",["^N",["^O",["^N",[["^P","^Q","^R","^1;"]]]]]],"^1D",true,"^7","~$entitydb.core/get-related-items-fn","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",37,"^W",["^N",[["^P","^Q","^R","^1;"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",359,"^K",359,"^Z",4,"^[",true,"^M",["^N",["^O",["^N",[["^P","^Q","^R","^1;"]]]]]],"~$remove-collection",["^ ","^F",null,"^G",["^ ","^H","/Users/retro/Projects/dataloader-example/resources/public/js/dev/entitydb/core.cljs","^I",301,"^J",7,"^K",301,"^L",24,"^M",["^N",["^O",["^N",[["^Q","^R","^S"]]]]],"^T","Removes the collection. Entities referenced from the collection will still be stored in\n  the internal store, but won't be available through the collection API.\n\n  ```clojure\n  (def entity-db-v1 {})\n  (def schema {:foos {:id :id}})\n\n  (def foo-entity {:id 1 :name \"bar\"})\n\n  (def entity-db-v2 (insert-collection schema entity-db-v1 :foos :list [foo-entity]))\n  \n  (get-collection schema entity-db-v2 :foos :list)\n  ;; Returns `[{:id 1 :name \"bar\"}]`\n\n  (def entity-db-v3 (remove-collection schema entity-db-v2 :foos :list))\n\n  (get-collection schema entity-db-v2 :foos :list)\n  ;; Returns `nil`\n\n  (get-item-by-id schema entity-db-v2 :foos 1)\n  ;; Returns `{:id 1 :name \"bar\"}`\n  ```\n  "],"^7","~$entitydb.core/remove-collection","^V",false,"^H","resources/public/js/dev/entitydb/core.cljs","^L",24,"^W",["^N",[["^Q","^R","^S"]]],"^X",null,"^Y",["^N",[null,null]],"^J",1,"^I",301,"^K",301,"^Z",3,"^[",true,"^M",["^N",["^O",["^N",[["^Q","^R","^S"]]]]],"^T","Removes the collection. Entities referenced from the collection will still be stored in\n  the internal store, but won't be available through the collection API.\n\n  ```clojure\n  (def entity-db-v1 {})\n  (def schema {:foos {:id :id}})\n\n  (def foo-entity {:id 1 :name \"bar\"})\n\n  (def entity-db-v2 (insert-collection schema entity-db-v1 :foos :list [foo-entity]))\n  \n  (get-collection schema entity-db-v2 :foos :list)\n  ;; Returns `[{:id 1 :name \"bar\"}]`\n\n  (def entity-db-v3 (remove-collection schema entity-db-v2 :foos :list))\n\n  (get-collection schema entity-db-v2 :foos :list)\n  ;; Returns `nil`\n\n  (get-item-by-id schema entity-db-v2 :foos 1)\n  ;; Returns `{:id 1 :name \"bar\"}`\n  ```\n  "]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:one","~:vacuum","~:get-item-meta","~:get-collection-meta","~:remove-named-item","~:get-collection","~:c-one","~:store","~:__meta-store__","~:insert-named-item","~:insert-meta","~:remove-item","~:prepend-collection","~:append-collection","~:remove-meta","~:get-named-item","~:c-many","~:get-item-by-id","~:insert-item","~:id","~:remove-collection","~:many","~:insert-collection","~:get-named-item-meta"]],"~:order",["^2N","^2M","^2L","^2V","^2F","^2[","^2Y","^2G","^2H","^2I","^2J","^2K","^2O","^2P","^2Q","^2R","^2S","^2T","^2U","^2W","^2X","^2Z","^30","^31"]],"^T",null]