["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Object",["^ "]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros"],"~:excludes",["~#set",[]],"~:name","~$keechma.controller","~:imports",null,"~:requires",["^ ","~$cljs.core.async","^=","~$reporter","~$keechma.reporter","^?","^?"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$<!","^=","~$put!","^="],"~:defs",["^ ","~$redirect",["^ ","^9","~$keechma.controller/redirect","~:file","resources/public/js/dev/keechma/controller.cljs","~:line",130,"~:column",1,"~:end-line",130,"~:end-column",19,"~:doc","Redirects the page to the URL based on the params.","~:meta",["^ ","^G","/Users/retro/Projects/dataloader-example/resources/public/js/dev/keechma/controller.cljs","^H",130,"^I",11,"^J",130,"^K",19,"^L","Redirects the page to the URL based on the params."],"~:tag","~$cljs.core/MultiFn"],"~$not-implemented",["^ ","^9","~$keechma.controller/not-implemented","^G","resources/public/js/dev/keechma/controller.cljs","^H",60,"^I",1,"^J",60,"^K",21,"^M",["^ ","^G","/Users/retro/Projects/dataloader-example/resources/public/js/dev/keechma/controller.cljs","^H",60,"^I",6,"^J",60,"^K",21],"^N","~$cljs.core/Keyword"],"~$send-command",["^ ","^9","~$keechma.controller/send-command","^G","resources/public/js/dev/keechma/controller.cljs","^H",122,"^I",1,"^J",122,"^K",23,"^L","Sends a command to another controller","^M",["^ ","^G","/Users/retro/Projects/dataloader-example/resources/public/js/dev/keechma/controller.cljs","^H",122,"^I",11,"^J",122,"^K",23,"^L","Sends a command to another controller"],"^N","^O"],"~$record-type",["^ ","~:protocol-inline",null,"^M",["^ ","^G","/Users/retro/Projects/dataloader-example/resources/public/js/dev/keechma/controller.cljs","^H",83,"^I",7,"^J",83,"^K",18,"~:arglists",["~#list",["~$quote",["^X",[["~$record","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",1,"~:method-params",[["^X",["^Z","^["]]],"^W",["^X",[["^Z","~$&","^["]]],"~:arglists-meta",["^X",[null]]]],"^9","~$keechma.controller/record-type","^11",true,"^G","resources/public/js/dev/keechma/controller.cljs","^K",18,"^10",["^ ","^11",true,"^12",1,"^13",[["^X",["^Z","^["]]],"^W",["^X",[["^Z","~$&","^["]]],"^14",["^X",[null]]],"^13",[["^X",["^Z","^["]]],"~:protocol-impl",null,"^14",["^X",[null]],"^I",1,"^H",83,"^J",83,"^12",1,"~:fn-var",true,"^W",["^X",[["^Z","~$&","^["]]]],"~$handler",["^ ","^9","~$keechma.controller/handler","^G","resources/public/js/dev/keechma/controller.cljs","^H",103,"^I",1,"^J",103,"^K",18,"^L","Called after the `start` function. You can listen to the commands on the `in-chan` \n  inside the `go` block. This is the function in which you implement anything that reacts\n  to the user commands (coming from the UI).","^M",["^ ","^G","/Users/retro/Projects/dataloader-example/resources/public/js/dev/keechma/controller.cljs","^H",103,"^I",11,"^J",103,"^K",18,"^L","Called after the `start` function. You can listen to the commands on the `in-chan` \n  inside the `go` block. This is the function in which you implement anything that reacts\n  to the user commands (coming from the UI)."],"^N","^O"],"~$wake",["^ ","^9","~$keechma.controller/wake","^G","resources/public/js/dev/keechma/controller.cljs","^H",92,"^I",1,"^J",92,"^K",15,"^L","Called when the controller is started from the saved state stored on the server. It will be\n   called instead of the `start` function if the `ssr-handler` function is implemented. This\n   allows you to manually revive the serialized data if needed. Usually this function is not\n   needed, but if you for instance start the inner application from the controller, you can\n   use this function to wake the inner app.","^M",["^ ","^G","/Users/retro/Projects/dataloader-example/resources/public/js/dev/keechma/controller.cljs","^H",92,"^I",11,"^J",92,"^K",15,"^L","Called when the controller is started from the saved state stored on the server. It will be\n   called instead of the `start` function if the `ssr-handler` function is implemented. This\n   allows you to manually revive the serialized data if needed. Usually this function is not\n   needed, but if you for instance start the inner application from the controller, you can\n   use this function to wake the inner app."],"^N","^O"],"~$report",["^ ","^9","~$keechma.controller/report","^G","resources/public/js/dev/keechma/controller.cljs","^H",117,"^I",1,"^J",117,"^K",17,"^M",["^ ","^G","/Users/retro/Projects/dataloader-example/resources/public/js/dev/keechma/controller.cljs","^H",117,"^I",11,"^J",117,"^K",17],"^N","^O"],"~$params",["^ ","^9","~$keechma.controller/params","^G","resources/public/js/dev/keechma/controller.cljs","^H",85,"^I",1,"^J",85,"^K",17,"^L","Receives the `route-params` and returns either the `params` for the controller or `nil`","^M",["^ ","^G","/Users/retro/Projects/dataloader-example/resources/public/js/dev/keechma/controller.cljs","^H",85,"^I",11,"^J",85,"^K",17,"^L","Receives the `route-params` and returns either the `params` for the controller or `nil`"],"^N","^O"],"~$start",["^ ","^9","~$keechma.controller/start","^G","resources/public/js/dev/keechma/controller.cljs","^H",88,"^I",1,"^J",88,"^K",16,"^L","Called when the controller is started. Receives the controller `params` (returned by the\n  `params` function) and the application state. It must return the application state.","^M",["^ ","^G","/Users/retro/Projects/dataloader-example/resources/public/js/dev/keechma/controller.cljs","^H",88,"^I",11,"^J",88,"^K",16,"^L","Called when the controller is started. Receives the controller `params` (returned by the\n  `params` function) and the application state. It must return the application state."],"^N","^O"],"~$dispatcher",["^ ","^V",null,"^M",["^ ","^G","/Users/retro/Projects/dataloader-example/resources/public/js/dev/keechma/controller.cljs","^H",62,"^I",7,"^J",62,"^K",17,"^W",["^X",["^Y",["^X",[["~$app-db-atom","~$in-chan","~$actions"]]]]],"^L","Helper function to dispatch commands from the `handler` function.\n\n  Most of the time, handler function will just dispatch the commands\n  to other functions. This functions provides a shortcut for that case.\n\n  ```clojure\n  (defrecord Controller []\n    IController\n    (handler [_ app-db-atom in-chan _]\n      (dispatcher app-db-atom in-chan {:command-name some-fn})))\n  ```"],"^9","~$keechma.controller/dispatcher","^11",false,"^G","resources/public/js/dev/keechma/controller.cljs","^K",17,"^13",["^X",[["^1C","^1D","^1E"]]],"^16",null,"^14",["^X",[null,null]],"^I",1,"^H",62,"^J",62,"^12",3,"^17",true,"^W",["^X",["^Y",["^X",[["^1C","^1D","^1E"]]]]],"^L","Helper function to dispatch commands from the `handler` function.\n\n  Most of the time, handler function will just dispatch the commands\n  to other functions. This functions provides a shortcut for that case.\n\n  ```clojure\n  (defrecord Controller []\n    IController\n    (handler [_ app-db-atom in-chan _]\n      (dispatcher app-db-atom in-chan {:command-name some-fn})))\n  ```"],"~$execute",["^ ","^9","~$keechma.controller/execute","^G","resources/public/js/dev/keechma/controller.cljs","^H",118,"^I",1,"^J",118,"^K",18,"^L","Puts the command on the controller's `in-chan` which is passed as an argument to the \n  `handler` function. Can be called from the `start` and `stop` functions.","^M",["^ ","^G","/Users/retro/Projects/dataloader-example/resources/public/js/dev/keechma/controller.cljs","^H",118,"^I",11,"^J",118,"^K",18,"^L","Puts the command on the controller's `in-chan` which is passed as an argument to the \n  `handler` function. Can be called from the `start` and `stop` functions."],"^N","^O"],"~$ssr-handler",["^ ","^9","~$keechma.controller/ssr-handler","^G","resources/public/js/dev/keechma/controller.cljs","^H",108,"^I",1,"^J",108,"^K",22,"^L","Called in after the `start` (instead of the `handler` function) function in the server\n  side context. This function should call the `done` callback when it has completed the \n  server side data loading. Returning `::not-implemented` which is a default behavior will\n  mark the controller as non server side.","^M",["^ ","^G","/Users/retro/Projects/dataloader-example/resources/public/js/dev/keechma/controller.cljs","^H",108,"^I",11,"^J",108,"^K",22,"^L","Called in after the `start` (instead of the `handler` function) function in the server\n  side context. This function should call the `done` callback when it has completed the \n  server side data loading. Returning `::not-implemented` which is a default behavior will\n  mark the controller as non server side."],"^N","^O"],"~$stop",["^ ","^9","~$keechma.controller/stop","^G","resources/public/js/dev/keechma/controller.cljs","^H",99,"^I",1,"^J",99,"^K",15,"^L","Called when the controller is stopped. Receives the controller `params` (returned by the\n  `params` function) and the application state. It must return the application state.","^M",["^ ","^G","/Users/retro/Projects/dataloader-example/resources/public/js/dev/keechma/controller.cljs","^H",99,"^I",11,"^J",99,"^K",15,"^L","Called when the controller is stopped. Receives the controller `params` (returned by the\n  `params` function) and the application state. It must return the application state."],"^N","^O"],"~$context",["^ ","^9","~$keechma.controller/context","^G","resources/public/js/dev/keechma/controller.cljs","^H",114,"^I",1,"^J",114,"^K",18,"^L","Return the context passed to the application.","^M",["^ ","^G","/Users/retro/Projects/dataloader-example/resources/public/js/dev/keechma/controller.cljs","^H",114,"^I",11,"^J",114,"^K",18,"^L","Return the context passed to the application."],"^N","^O"],"~$map->SerializedController",["^ ","^V",null,"^M",["^ ","^G","/Users/retro/Projects/dataloader-example/resources/public/js/dev/keechma/controller.cljs","^H",81,"^I",12,"^J",81,"^K",32,"~:internal-ctor",true,"~:factory","~:map","^W",["^X",["^Y",["^X",[["~$G__40276"]]]]]],"^9","~$keechma.controller/map->SerializedController","^11",false,"^G","resources/public/js/dev/keechma/controller.cljs","^K",32,"^13",["^X",[["^1S"]]],"^16",null,"^14",["^X",[null,null]],"^I",1,"^1P",true,"^1Q","^1R","^H",81,"^J",81,"^12",1,"^17",true,"^W",["^X",["^Y",["^X",[["^1S"]]]]]],"~$is-running?",["^ ","^9","~$keechma.controller/is-running?","^G","resources/public/js/dev/keechma/controller.cljs","^H",125,"^I",1,"^J",125,"^K",22,"^L","Returns `true` if this controller is still running. You can use this if you have some\n  kind of async action, and you want to make sure that the controller is still running \n  when you receive the results.","^M",["^ ","^G","/Users/retro/Projects/dataloader-example/resources/public/js/dev/keechma/controller.cljs","^H",125,"^I",11,"^J",125,"^K",22,"^L","Returns `true` if this controller is still running. You can use this if you have some\n  kind of async action, and you want to make sure that the controller is still running \n  when you receive the results."],"^N","^O"],"~$SerializedController",["^ ","~:num-fields",1,"~:protocols",["^8",["~$cljs.core/IRecord","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^9","~$keechma.controller/SerializedController","^G","resources/public/js/dev/keechma/controller.cljs","^K",32,"~:type",true,"^I",12,"^1P",true,"^H",81,"~:record",true,"^J",81,"~:skip-protocol-flag",["^8",["^1Z","^1[","^20","^21","^22","^23","^24","^25","^26","^27","^28","^29","^2:","^2;"]]],"~$->SerializedController",["^ ","^V",null,"^M",["^ ","^G","/Users/retro/Projects/dataloader-example/resources/public/js/dev/keechma/controller.cljs","^H",81,"^I",12,"^J",81,"^K",32,"^1P",true,"^1Q","~:positional","^W",["^X",["^Y",["^X",[["^1>"]]]]]],"^9","~$keechma.controller/->SerializedController","^11",false,"^G","resources/public/js/dev/keechma/controller.cljs","^K",32,"^13",["^X",[["^1>"]]],"^16",null,"^14",["^X",[null,null]],"^I",1,"^1P",true,"^1Q","^2A","^H",81,"^J",81,"^12",1,"^17",true,"^W",["^X",["^Y",["^X",[["^1>"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^6","^6"],"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:controller","~:else","~:default","^9","~:out-chan","~:params","~:recur","~:running","^1>","~:reporter","~:out","~:info","~:context","~:keechma.controller/not-implemented","~:in-chan","~:hierarchy","~:redirect-fn","~:in"]],"~:order",["^2R","^2L","^2H","^2K","^1>","^2T","^2I","^2Q","^2P","^2N","^9","^2G","^2V","^2S","^2J","^2O","^2M","^2U"]],"^L","Controllers in Keechma are the place where you put the code\n  that has side-effects. They are managed by the [[keechma.controller-manager]]\n  which will start them or stop them based on the current route.\n\n  Each controller implements the `params` function. `params` function returns\n  a subset of the route params that are the controller is interested in.\n\n  For instance let's say that you have a `UserController` which should be\n  running only when the user is on the route `/users`:\n\n  ```clojure\n  ;; let's say that your routes are defined like this:\n  \n  (def routes [\":page\"]) ;; Routes are managed by the app-state library.\n\n  ;; When user goes to the url `/users` the params function would receive\n  ;; something that looks like this:\n\n  {:data {:page \"users\"}}\n\n  ;; `params` function returns `true` only when user is on the `:page` \"users\"\n  (defrecord UserController [])\n\n  (defmethod controller/params UserController [_ route-params]\n    (when (= \"users\" (get-in route-params [:data :page]))\n     true))\n  ```\n\n  When `params` function returns a non `nil` value the controller will be started:\n\n  1. Controller's `start` function will be synchronously called with the current\n  application state. This function returns a new version of the state if needed.\n  (if the `start` function is not doing any changes to the app-state it must return\n  the received version)\n  2. Controller's `handler` function will be called - this function will receive\n  application state atom, channel through which the controller receives the commands\n  (`in-chan`) and the channel through which the controller can send commends to\n  other controllers (`out-chan`).\n\n  When `params` function returns a `nil` value that instance of the controller will\n  be stopped:\n\n  1. Controller's `stop` function will be synchronously called with the current\n  application state. This function returns a new version of the state if needed - \n  use this function to clean up any data loaded by the controller (if the `stop` \n  function is not doing any changes to the app-state it must return the received\n  version).\n  2. Controller's `in-chan` (through which it can receive commands) will be closed.\n\n  Controller's `start` and `stop` functions can asynchronuously send commends to the\n  controller. Calling `(execute controller-instance :command)` will put that command\n  on the controller's `in-chan`. Controller can react to these commands from the \n  `handler` function."]